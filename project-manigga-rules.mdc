---
description: 
globs: 
alwaysApply: true
---

# Your rule content

# Tech Stack rules
- Use next js for the front end the most updated version
- use shadcd/ui for the ui component library

# State Management Rules
- use Zustand for the stage management
- strickly to function implemented inside the slices, since it is for state management only

# JavaScript and TypeScript Rules

- Use single quotes for strings
- No semicolons
- Max line length: 80 characters
- Use const by default
- No var keyword
- Prefer template literals
- No for loops (use array methods instead)
- Functions must be pure and immutable:
  - No array mutations (push, pop, splice)
  - No object mutations
  - Use spread operators for copies

# React Rules

- Use functional components
- Hook names must start with "use" followed by capital letter
- Destructure props
- Prefer arrow functions
- Use classNames utility for dynamic classes:
  - No string concatenation in className
  - No ternary operators directly in className
- Use single quotes for prop values and JSX attributes
- one component per file
- Follow the shared state pattern
  - state and handlers in a container component
  - components rendered inside the container should be stateless
- always add visible loading states when fetching data

# TypeScript Rules

- Enable strict mode
- Explicit return types required
- No any type
- Use type instead of interface
- Explicit types for function arguments
- Create types for React props and save them in the same file as the component with export capability

# Testing Rules

- All tests must have describe blocks
- Create tests in a __tests__ folder that is as close as possible to the item to test
- For React component tests:
  - Use dependency injection over module mocking
  - Mock dependencies at the closest possible level
  - Wait for visible loading states to disappear before asserting
  - Properly await all asynchronous operations
  - prefer findBy queries when component has asynchronous loading

# Important
- Use yarn for dependency management

# Folder Structure convention
- For each module use the following convention:
  ```
  module/                     # Replace with actual name of module (e.g. projects, members, sign-in)
  ├── components/             # React components related to the module
  ├── actions.ts              # Actions related to the module (e.g. getUser, createProject)
  ├── types.ts                # Typescript types related to the module
  └── validations.ts          # Form validation schemas (if using validation libraries like zod)
  ```


